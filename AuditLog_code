Alright, let's **deep dive** into **Audit Logs & User Activity Tracking** for your **Asset Management System**.

---

## **🔍 Why Do You Need Audit Logs?**  
Audit logs help in **tracking, monitoring, and securing** critical operations in your system. They are **crucial** for:  

1. **Security & Compliance** – Logs help in detecting unauthorized access or actions.  
2. **Debugging & Troubleshooting** – If something breaks, logs help trace back the issue.  
3. **Accountability & Transparency** – Know **who did what and when** to prevent fraud or mistakes.  
4. **System Optimization** – Analyze logs to find **frequent user actions**, helping in UI/UX improvements.  

---

## **📌 Implementation Plan**
We'll **design**, **store**, and **display** logs efficiently.

### **1. Database Schema for Audit Logs**
You'll need a **dedicated table** to store audit data.

```sql
CREATE TABLE audit_logs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    action VARCHAR(255) NOT NULL,
    affected_table VARCHAR(100),
    affected_row_id INT,
    ip_address VARCHAR(50),
    user_agent TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
```

### **2. Logging User Actions (Backend Implementation)**
Every time a user **creates, updates, deletes, or assigns** an asset, **log it**.

#### **🔹 Middleware to Capture User Actions (Node.js & Express)**
Create a middleware to **log every request** related to asset transactions.

```js
const { AuditLog } = require("../models"); // Sequelize Model for Audit Logs

const logAction = async (userId, action, affectedTable, affectedRowId, req) => {
    try {
        await AuditLog.create({
            user_id: userId,
            action,
            affected_table: affectedTable,
            affected_row_id: affectedRowId,
            ip_address: req.ip || "Unknown",
            user_agent: req.headers["user-agent"],
        });
    } catch (error) {
        console.error("Audit Log Error:", error);
    }
};

module.exports = logAction;
```

#### **🔹 Usage Example (Logging in Controller)**
Modify your **routes/controllers** to call this function when users perform actions.

```js
const logAction = require("../middleware/auditLogger");

router.post("/allocate-asset", async (req, res) => {
    try {
        const { assetId, employeeId } = req.body;
        const userId = req.user.id; // Assuming logged-in user data is available

        // Perform allocation logic here...

        // Log the action
        await logAction(userId, "Allocated Asset", "assets", assetId, req);

        return res.json({ success: true, message: "Asset allocated successfully" });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ success: false, message: "Internal Server Error" });
    }
});
```

👉 **Where to use?**  
- **Login/logout events**
- **Creating/modifying/deleting assets**
- **Allocating/releasing assets**
- **Raising/resolving repair tickets**
- **Any admin actions**

---

## **3. Displaying Logs in an Admin Panel**
Create an admin dashboard to **view audit logs**.

### **🔹 Backend Route to Fetch Logs**
```js
router.get("/audit-logs", async (req, res) => {
    try {
        const logs = await AuditLog.findAll({ order: [["timestamp", "DESC"]] });
        res.json({ success: true, logs });
    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: "Failed to fetch logs" });
    }
});
```

### **🔹 Frontend - Display Logs in a Table (EJS + Bootstrap)**
```html
<table class="table table-striped">
    <thead>
        <tr>
            <th>User</th>
            <th>Action</th>
            <th>Affected Table</th>
            <th>Affected ID</th>
            <th>IP Address</th>
            <th>User Agent</th>
            <th>Timestamp</th>
        </tr>
    </thead>
    <tbody>
        <% logs.forEach(log => { %>
            <tr>
                <td><%= log.user_id %></td>
                <td><%= log.action %></td>
                <td><%= log.affected_table || 'N/A' %></td>
                <td><%= log.affected_row_id || 'N/A' %></td>
                <td><%= log.ip_address %></td>
                <td><%= log.user_agent.substring(0, 30) + '...' %></td>
                <td><%= log.timestamp %></td>
            </tr>
        <% }) %>
    </tbody>
</table>
```
---

## **4. Advanced Features for Audit Logs**
Once you have a basic system, you can **enhance it**.

### **🔹 Role-Based Access to Logs**
Ensure **only admins** can access logs.

```js
const isAdmin = (req, res, next) => {
    if (req.user.role !== "admin") {
        return res.status(403).json({ message: "Unauthorized Access" });
    }
    next();
};

router.get("/audit-logs", isAdmin, async (req, res) => {
    // Fetch logs
});
```

### **🔹 Log Deletion Protection**
Ensure logs cannot be **deleted/modified** except under strict conditions.

```sql
ALTER TABLE audit_logs ADD CONSTRAINT no_delete_log 
    BEFORE DELETE ON audit_logs FOR EACH ROW SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Audit logs cannot be deleted';
```

### **🔹 Filters & Search in Logs**
Add search functionality by **date range, user ID, action type**.

#### **🔹 Backend Route for Filtered Logs**
```js
router.get("/audit-logs/search", async (req, res) => {
    try {
        const { action, userId, startDate, endDate } = req.query;
        const whereClause = {};

        if (action) whereClause.action = action;
        if (userId) whereClause.user_id = userId;
        if (startDate && endDate) {
            whereClause.timestamp = { [Op.between]: [new Date(startDate), new Date(endDate)] };
        }

        const logs = await AuditLog.findAll({ where: whereClause });
        res.json({ success: true, logs });
    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: "Error fetching logs" });
    }
});
```

#### **🔹 Frontend - Filter Logs UI**
```html
<form method="GET" action="/audit-logs/search">
    <input type="text" name="userId" placeholder="User ID">
    <select name="action">
        <option value="">All Actions</option>
        <option value="Allocated Asset">Allocated Asset</option>
        <option value="Deleted Asset">Deleted Asset</option>
    </select>
    <input type="date" name="startDate">
    <input type="date" name="endDate">
    <button type="submit">Search</button>
</form>
```

---

## **🚀 Summary**
✅ **Audit Log Table** – Tracks actions with user, timestamps, affected tables.  
✅ **Middleware for Logging** – Automatically captures actions in API calls.  
✅ **Admin Dashboard for Viewing Logs** – Displays logs in a table.  
✅ **Security Enhancements** – Protect logs, allow role-based access.  
✅ **Filters & Search** – Enables filtering logs by user, action, or date.  

---

## **🔥 What’s Next?**
If you implement this, you can extend it further:  
- **Graphical Insights** – Show top users making changes using **Chart.js**.  
- **Alerts on Suspicious Activity** – If an employee deletes too many assets at once.  
- **Webhook Integration** – Push logs to external monitoring tools like **ELK Stack** (Elasticsearch, Logstash, Kibana).  

---

This will **boost security, improve debugging, and provide better tracking** for your Asset Management System. **Want help with implementation?** 🚀
